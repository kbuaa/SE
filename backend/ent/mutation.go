// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/itclub/app/ent/doctor"
	"github.com/itclub/app/ent/drug"
	"github.com/itclub/app/ent/nurse"
	"github.com/itclub/app/ent/patient"
	"github.com/itclub/app/ent/prescription"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDoctor       = "Doctor"
	TypeDrug         = "Drug"
	TypeNurse        = "Nurse"
	TypePatient      = "Patient"
	TypePrescription = "Prescription"
)

// DoctorMutation represents an operation that mutate the Doctors
// nodes in the graph.
type DoctorMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	_Doctor_Email              *string
	_Doctor_Name               *string
	_Doctor_Tel                *string
	clearedFields              map[string]struct{}
	doctor_prescription        map[int]struct{}
	removeddoctor_prescription map[int]struct{}
	done                       bool
	oldValue                   func(context.Context) (*Doctor, error)
}

var _ ent.Mutation = (*DoctorMutation)(nil)

// doctorOption allows to manage the mutation configuration using functional options.
type doctorOption func(*DoctorMutation)

// newDoctorMutation creates new mutation for $n.Name.
func newDoctorMutation(c config, op Op, opts ...doctorOption) *DoctorMutation {
	m := &DoctorMutation{
		config:        c,
		op:            op,
		typ:           TypeDoctor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDoctorID sets the id field of the mutation.
func withDoctorID(id int) doctorOption {
	return func(m *DoctorMutation) {
		var (
			err   error
			once  sync.Once
			value *Doctor
		)
		m.oldValue = func(ctx context.Context) (*Doctor, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Doctor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDoctor sets the old Doctor of the mutation.
func withDoctor(node *Doctor) doctorOption {
	return func(m *DoctorMutation) {
		m.oldValue = func(context.Context) (*Doctor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DoctorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DoctorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DoctorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDoctorEmail sets the Doctor_Email field.
func (m *DoctorMutation) SetDoctorEmail(s string) {
	m._Doctor_Email = &s
}

// DoctorEmail returns the Doctor_Email value in the mutation.
func (m *DoctorMutation) DoctorEmail() (r string, exists bool) {
	v := m._Doctor_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorEmail returns the old Doctor_Email value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorEmail: %w", err)
	}
	return oldValue.DoctorEmail, nil
}

// ResetDoctorEmail reset all changes of the "Doctor_Email" field.
func (m *DoctorMutation) ResetDoctorEmail() {
	m._Doctor_Email = nil
}

// SetDoctorName sets the Doctor_Name field.
func (m *DoctorMutation) SetDoctorName(s string) {
	m._Doctor_Name = &s
}

// DoctorName returns the Doctor_Name value in the mutation.
func (m *DoctorMutation) DoctorName() (r string, exists bool) {
	v := m._Doctor_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorName returns the old Doctor_Name value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorName: %w", err)
	}
	return oldValue.DoctorName, nil
}

// ResetDoctorName reset all changes of the "Doctor_Name" field.
func (m *DoctorMutation) ResetDoctorName() {
	m._Doctor_Name = nil
}

// SetDoctorTel sets the Doctor_Tel field.
func (m *DoctorMutation) SetDoctorTel(s string) {
	m._Doctor_Tel = &s
}

// DoctorTel returns the Doctor_Tel value in the mutation.
func (m *DoctorMutation) DoctorTel() (r string, exists bool) {
	v := m._Doctor_Tel
	if v == nil {
		return
	}
	return *v, true
}

// OldDoctorTel returns the old Doctor_Tel value of the Doctor.
// If the Doctor object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DoctorMutation) OldDoctorTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDoctorTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDoctorTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDoctorTel: %w", err)
	}
	return oldValue.DoctorTel, nil
}

// ResetDoctorTel reset all changes of the "Doctor_Tel" field.
func (m *DoctorMutation) ResetDoctorTel() {
	m._Doctor_Tel = nil
}

// AddDoctorPrescriptionIDs adds the doctor_prescription edge to Prescription by ids.
func (m *DoctorMutation) AddDoctorPrescriptionIDs(ids ...int) {
	if m.doctor_prescription == nil {
		m.doctor_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.doctor_prescription[ids[i]] = struct{}{}
	}
}

// RemoveDoctorPrescriptionIDs removes the doctor_prescription edge to Prescription by ids.
func (m *DoctorMutation) RemoveDoctorPrescriptionIDs(ids ...int) {
	if m.removeddoctor_prescription == nil {
		m.removeddoctor_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddoctor_prescription[ids[i]] = struct{}{}
	}
}

// RemovedDoctorPrescription returns the removed ids of doctor_prescription.
func (m *DoctorMutation) RemovedDoctorPrescriptionIDs() (ids []int) {
	for id := range m.removeddoctor_prescription {
		ids = append(ids, id)
	}
	return
}

// DoctorPrescriptionIDs returns the doctor_prescription ids in the mutation.
func (m *DoctorMutation) DoctorPrescriptionIDs() (ids []int) {
	for id := range m.doctor_prescription {
		ids = append(ids, id)
	}
	return
}

// ResetDoctorPrescription reset all changes of the "doctor_prescription" edge.
func (m *DoctorMutation) ResetDoctorPrescription() {
	m.doctor_prescription = nil
	m.removeddoctor_prescription = nil
}

// Op returns the operation name.
func (m *DoctorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Doctor).
func (m *DoctorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DoctorMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Doctor_Email != nil {
		fields = append(fields, doctor.FieldDoctorEmail)
	}
	if m._Doctor_Name != nil {
		fields = append(fields, doctor.FieldDoctorName)
	}
	if m._Doctor_Tel != nil {
		fields = append(fields, doctor.FieldDoctorTel)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DoctorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case doctor.FieldDoctorEmail:
		return m.DoctorEmail()
	case doctor.FieldDoctorName:
		return m.DoctorName()
	case doctor.FieldDoctorTel:
		return m.DoctorTel()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DoctorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case doctor.FieldDoctorEmail:
		return m.OldDoctorEmail(ctx)
	case doctor.FieldDoctorName:
		return m.OldDoctorName(ctx)
	case doctor.FieldDoctorTel:
		return m.OldDoctorTel(ctx)
	}
	return nil, fmt.Errorf("unknown Doctor field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case doctor.FieldDoctorEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorEmail(v)
		return nil
	case doctor.FieldDoctorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorName(v)
		return nil
	case doctor.FieldDoctorTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDoctorTel(v)
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DoctorMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DoctorMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DoctorMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DoctorMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DoctorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DoctorMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Doctor nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DoctorMutation) ResetField(name string) error {
	switch name {
	case doctor.FieldDoctorEmail:
		m.ResetDoctorEmail()
		return nil
	case doctor.FieldDoctorName:
		m.ResetDoctorName()
		return nil
	case doctor.FieldDoctorTel:
		m.ResetDoctorTel()
		return nil
	}
	return fmt.Errorf("unknown Doctor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DoctorMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.doctor_prescription != nil {
		edges = append(edges, doctor.EdgeDoctorPrescription)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DoctorMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorPrescription:
		ids := make([]ent.Value, 0, len(m.doctor_prescription))
		for id := range m.doctor_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DoctorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddoctor_prescription != nil {
		edges = append(edges, doctor.EdgeDoctorPrescription)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DoctorMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case doctor.EdgeDoctorPrescription:
		ids := make([]ent.Value, 0, len(m.removeddoctor_prescription))
		for id := range m.removeddoctor_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DoctorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DoctorMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DoctorMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Doctor unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DoctorMutation) ResetEdge(name string) error {
	switch name {
	case doctor.EdgeDoctorPrescription:
		m.ResetDoctorPrescription()
		return nil
	}
	return fmt.Errorf("unknown Doctor edge %s", name)
}

// DrugMutation represents an operation that mutate the Drugs
// nodes in the graph.
type DrugMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	_Drug_Name               *string
	clearedFields            map[string]struct{}
	drug_prescription        map[int]struct{}
	removeddrug_prescription map[int]struct{}
	done                     bool
	oldValue                 func(context.Context) (*Drug, error)
}

var _ ent.Mutation = (*DrugMutation)(nil)

// drugOption allows to manage the mutation configuration using functional options.
type drugOption func(*DrugMutation)

// newDrugMutation creates new mutation for $n.Name.
func newDrugMutation(c config, op Op, opts ...drugOption) *DrugMutation {
	m := &DrugMutation{
		config:        c,
		op:            op,
		typ:           TypeDrug,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDrugID sets the id field of the mutation.
func withDrugID(id int) drugOption {
	return func(m *DrugMutation) {
		var (
			err   error
			once  sync.Once
			value *Drug
		)
		m.oldValue = func(ctx context.Context) (*Drug, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Drug.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDrug sets the old Drug of the mutation.
func withDrug(node *Drug) drugOption {
	return func(m *DrugMutation) {
		m.oldValue = func(context.Context) (*Drug, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DrugMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DrugMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DrugMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDrugName sets the Drug_Name field.
func (m *DrugMutation) SetDrugName(s string) {
	m._Drug_Name = &s
}

// DrugName returns the Drug_Name value in the mutation.
func (m *DrugMutation) DrugName() (r string, exists bool) {
	v := m._Drug_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldDrugName returns the old Drug_Name value of the Drug.
// If the Drug object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DrugMutation) OldDrugName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDrugName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDrugName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDrugName: %w", err)
	}
	return oldValue.DrugName, nil
}

// ResetDrugName reset all changes of the "Drug_Name" field.
func (m *DrugMutation) ResetDrugName() {
	m._Drug_Name = nil
}

// AddDrugPrescriptionIDs adds the drug_prescription edge to Prescription by ids.
func (m *DrugMutation) AddDrugPrescriptionIDs(ids ...int) {
	if m.drug_prescription == nil {
		m.drug_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.drug_prescription[ids[i]] = struct{}{}
	}
}

// RemoveDrugPrescriptionIDs removes the drug_prescription edge to Prescription by ids.
func (m *DrugMutation) RemoveDrugPrescriptionIDs(ids ...int) {
	if m.removeddrug_prescription == nil {
		m.removeddrug_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.removeddrug_prescription[ids[i]] = struct{}{}
	}
}

// RemovedDrugPrescription returns the removed ids of drug_prescription.
func (m *DrugMutation) RemovedDrugPrescriptionIDs() (ids []int) {
	for id := range m.removeddrug_prescription {
		ids = append(ids, id)
	}
	return
}

// DrugPrescriptionIDs returns the drug_prescription ids in the mutation.
func (m *DrugMutation) DrugPrescriptionIDs() (ids []int) {
	for id := range m.drug_prescription {
		ids = append(ids, id)
	}
	return
}

// ResetDrugPrescription reset all changes of the "drug_prescription" edge.
func (m *DrugMutation) ResetDrugPrescription() {
	m.drug_prescription = nil
	m.removeddrug_prescription = nil
}

// Op returns the operation name.
func (m *DrugMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Drug).
func (m *DrugMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DrugMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Drug_Name != nil {
		fields = append(fields, drug.FieldDrugName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DrugMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case drug.FieldDrugName:
		return m.DrugName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DrugMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case drug.FieldDrugName:
		return m.OldDrugName(ctx)
	}
	return nil, fmt.Errorf("unknown Drug field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) SetField(name string, value ent.Value) error {
	switch name {
	case drug.FieldDrugName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDrugName(v)
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DrugMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DrugMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DrugMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DrugMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DrugMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DrugMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Drug nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DrugMutation) ResetField(name string) error {
	switch name {
	case drug.FieldDrugName:
		m.ResetDrugName()
		return nil
	}
	return fmt.Errorf("unknown Drug field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DrugMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.drug_prescription != nil {
		edges = append(edges, drug.EdgeDrugPrescription)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DrugMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeDrugPrescription:
		ids := make([]ent.Value, 0, len(m.drug_prescription))
		for id := range m.drug_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DrugMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddrug_prescription != nil {
		edges = append(edges, drug.EdgeDrugPrescription)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DrugMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case drug.EdgeDrugPrescription:
		ids := make([]ent.Value, 0, len(m.removeddrug_prescription))
		for id := range m.removeddrug_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DrugMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DrugMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DrugMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Drug unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DrugMutation) ResetEdge(name string) error {
	switch name {
	case drug.EdgeDrugPrescription:
		m.ResetDrugPrescription()
		return nil
	}
	return fmt.Errorf("unknown Drug edge %s", name)
}

// NurseMutation represents an operation that mutate the Nurses
// nodes in the graph.
type NurseMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	_Nurse_Email              *string
	_Nurse_Name               *string
	_Nurse_Tel                *string
	_Nurse_Password           *string
	clearedFields             map[string]struct{}
	nurse_prescription        map[int]struct{}
	removednurse_prescription map[int]struct{}
	done                      bool
	oldValue                  func(context.Context) (*Nurse, error)
}

var _ ent.Mutation = (*NurseMutation)(nil)

// nurseOption allows to manage the mutation configuration using functional options.
type nurseOption func(*NurseMutation)

// newNurseMutation creates new mutation for $n.Name.
func newNurseMutation(c config, op Op, opts ...nurseOption) *NurseMutation {
	m := &NurseMutation{
		config:        c,
		op:            op,
		typ:           TypeNurse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNurseID sets the id field of the mutation.
func withNurseID(id int) nurseOption {
	return func(m *NurseMutation) {
		var (
			err   error
			once  sync.Once
			value *Nurse
		)
		m.oldValue = func(ctx context.Context) (*Nurse, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Nurse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNurse sets the old Nurse of the mutation.
func withNurse(node *Nurse) nurseOption {
	return func(m *NurseMutation) {
		m.oldValue = func(context.Context) (*Nurse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NurseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NurseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *NurseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNurseEmail sets the Nurse_Email field.
func (m *NurseMutation) SetNurseEmail(s string) {
	m._Nurse_Email = &s
}

// NurseEmail returns the Nurse_Email value in the mutation.
func (m *NurseMutation) NurseEmail() (r string, exists bool) {
	v := m._Nurse_Email
	if v == nil {
		return
	}
	return *v, true
}

// OldNurseEmail returns the old Nurse_Email value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldNurseEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNurseEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNurseEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNurseEmail: %w", err)
	}
	return oldValue.NurseEmail, nil
}

// ResetNurseEmail reset all changes of the "Nurse_Email" field.
func (m *NurseMutation) ResetNurseEmail() {
	m._Nurse_Email = nil
}

// SetNurseName sets the Nurse_Name field.
func (m *NurseMutation) SetNurseName(s string) {
	m._Nurse_Name = &s
}

// NurseName returns the Nurse_Name value in the mutation.
func (m *NurseMutation) NurseName() (r string, exists bool) {
	v := m._Nurse_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldNurseName returns the old Nurse_Name value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldNurseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNurseName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNurseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNurseName: %w", err)
	}
	return oldValue.NurseName, nil
}

// ResetNurseName reset all changes of the "Nurse_Name" field.
func (m *NurseMutation) ResetNurseName() {
	m._Nurse_Name = nil
}

// SetNurseTel sets the Nurse_Tel field.
func (m *NurseMutation) SetNurseTel(s string) {
	m._Nurse_Tel = &s
}

// NurseTel returns the Nurse_Tel value in the mutation.
func (m *NurseMutation) NurseTel() (r string, exists bool) {
	v := m._Nurse_Tel
	if v == nil {
		return
	}
	return *v, true
}

// OldNurseTel returns the old Nurse_Tel value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldNurseTel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNurseTel is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNurseTel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNurseTel: %w", err)
	}
	return oldValue.NurseTel, nil
}

// ResetNurseTel reset all changes of the "Nurse_Tel" field.
func (m *NurseMutation) ResetNurseTel() {
	m._Nurse_Tel = nil
}

// SetNursePassword sets the Nurse_Password field.
func (m *NurseMutation) SetNursePassword(s string) {
	m._Nurse_Password = &s
}

// NursePassword returns the Nurse_Password value in the mutation.
func (m *NurseMutation) NursePassword() (r string, exists bool) {
	v := m._Nurse_Password
	if v == nil {
		return
	}
	return *v, true
}

// OldNursePassword returns the old Nurse_Password value of the Nurse.
// If the Nurse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *NurseMutation) OldNursePassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNursePassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNursePassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNursePassword: %w", err)
	}
	return oldValue.NursePassword, nil
}

// ResetNursePassword reset all changes of the "Nurse_Password" field.
func (m *NurseMutation) ResetNursePassword() {
	m._Nurse_Password = nil
}

// AddNursePrescriptionIDs adds the nurse_prescription edge to Prescription by ids.
func (m *NurseMutation) AddNursePrescriptionIDs(ids ...int) {
	if m.nurse_prescription == nil {
		m.nurse_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.nurse_prescription[ids[i]] = struct{}{}
	}
}

// RemoveNursePrescriptionIDs removes the nurse_prescription edge to Prescription by ids.
func (m *NurseMutation) RemoveNursePrescriptionIDs(ids ...int) {
	if m.removednurse_prescription == nil {
		m.removednurse_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.removednurse_prescription[ids[i]] = struct{}{}
	}
}

// RemovedNursePrescription returns the removed ids of nurse_prescription.
func (m *NurseMutation) RemovedNursePrescriptionIDs() (ids []int) {
	for id := range m.removednurse_prescription {
		ids = append(ids, id)
	}
	return
}

// NursePrescriptionIDs returns the nurse_prescription ids in the mutation.
func (m *NurseMutation) NursePrescriptionIDs() (ids []int) {
	for id := range m.nurse_prescription {
		ids = append(ids, id)
	}
	return
}

// ResetNursePrescription reset all changes of the "nurse_prescription" edge.
func (m *NurseMutation) ResetNursePrescription() {
	m.nurse_prescription = nil
	m.removednurse_prescription = nil
}

// Op returns the operation name.
func (m *NurseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Nurse).
func (m *NurseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *NurseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._Nurse_Email != nil {
		fields = append(fields, nurse.FieldNurseEmail)
	}
	if m._Nurse_Name != nil {
		fields = append(fields, nurse.FieldNurseName)
	}
	if m._Nurse_Tel != nil {
		fields = append(fields, nurse.FieldNurseTel)
	}
	if m._Nurse_Password != nil {
		fields = append(fields, nurse.FieldNursePassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *NurseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nurse.FieldNurseEmail:
		return m.NurseEmail()
	case nurse.FieldNurseName:
		return m.NurseName()
	case nurse.FieldNurseTel:
		return m.NurseTel()
	case nurse.FieldNursePassword:
		return m.NursePassword()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *NurseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nurse.FieldNurseEmail:
		return m.OldNurseEmail(ctx)
	case nurse.FieldNurseName:
		return m.OldNurseName(ctx)
	case nurse.FieldNurseTel:
		return m.OldNurseTel(ctx)
	case nurse.FieldNursePassword:
		return m.OldNursePassword(ctx)
	}
	return nil, fmt.Errorf("unknown Nurse field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NurseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nurse.FieldNurseEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNurseEmail(v)
		return nil
	case nurse.FieldNurseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNurseName(v)
		return nil
	case nurse.FieldNurseTel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNurseTel(v)
		return nil
	case nurse.FieldNursePassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNursePassword(v)
		return nil
	}
	return fmt.Errorf("unknown Nurse field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *NurseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *NurseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *NurseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Nurse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *NurseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *NurseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *NurseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Nurse nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *NurseMutation) ResetField(name string) error {
	switch name {
	case nurse.FieldNurseEmail:
		m.ResetNurseEmail()
		return nil
	case nurse.FieldNurseName:
		m.ResetNurseName()
		return nil
	case nurse.FieldNurseTel:
		m.ResetNurseTel()
		return nil
	case nurse.FieldNursePassword:
		m.ResetNursePassword()
		return nil
	}
	return fmt.Errorf("unknown Nurse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *NurseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.nurse_prescription != nil {
		edges = append(edges, nurse.EdgeNursePrescription)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *NurseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nurse.EdgeNursePrescription:
		ids := make([]ent.Value, 0, len(m.nurse_prescription))
		for id := range m.nurse_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *NurseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removednurse_prescription != nil {
		edges = append(edges, nurse.EdgeNursePrescription)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *NurseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case nurse.EdgeNursePrescription:
		ids := make([]ent.Value, 0, len(m.removednurse_prescription))
		for id := range m.removednurse_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *NurseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *NurseMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *NurseMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Nurse unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *NurseMutation) ResetEdge(name string) error {
	switch name {
	case nurse.EdgeNursePrescription:
		m.ResetNursePrescription()
		return nil
	}
	return fmt.Errorf("unknown Nurse edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	_Patient_Name               *string
	clearedFields               map[string]struct{}
	patient_prescription        map[int]struct{}
	removedpatient_prescription map[int]struct{}
	done                        bool
	oldValue                    func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPatientName sets the Patient_Name field.
func (m *PatientMutation) SetPatientName(s string) {
	m._Patient_Name = &s
}

// PatientName returns the Patient_Name value in the mutation.
func (m *PatientMutation) PatientName() (r string, exists bool) {
	v := m._Patient_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldPatientName returns the old Patient_Name value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldPatientName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPatientName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPatientName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPatientName: %w", err)
	}
	return oldValue.PatientName, nil
}

// ResetPatientName reset all changes of the "Patient_Name" field.
func (m *PatientMutation) ResetPatientName() {
	m._Patient_Name = nil
}

// AddPatientPrescriptionIDs adds the patient_prescription edge to Prescription by ids.
func (m *PatientMutation) AddPatientPrescriptionIDs(ids ...int) {
	if m.patient_prescription == nil {
		m.patient_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.patient_prescription[ids[i]] = struct{}{}
	}
}

// RemovePatientPrescriptionIDs removes the patient_prescription edge to Prescription by ids.
func (m *PatientMutation) RemovePatientPrescriptionIDs(ids ...int) {
	if m.removedpatient_prescription == nil {
		m.removedpatient_prescription = make(map[int]struct{})
	}
	for i := range ids {
		m.removedpatient_prescription[ids[i]] = struct{}{}
	}
}

// RemovedPatientPrescription returns the removed ids of patient_prescription.
func (m *PatientMutation) RemovedPatientPrescriptionIDs() (ids []int) {
	for id := range m.removedpatient_prescription {
		ids = append(ids, id)
	}
	return
}

// PatientPrescriptionIDs returns the patient_prescription ids in the mutation.
func (m *PatientMutation) PatientPrescriptionIDs() (ids []int) {
	for id := range m.patient_prescription {
		ids = append(ids, id)
	}
	return
}

// ResetPatientPrescription reset all changes of the "patient_prescription" edge.
func (m *PatientMutation) ResetPatientPrescription() {
	m.patient_prescription = nil
	m.removedpatient_prescription = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Patient_Name != nil {
		fields = append(fields, patient.FieldPatientName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldPatientName:
		return m.PatientName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldPatientName:
		return m.OldPatientName(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldPatientName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPatientName(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldPatientName:
		m.ResetPatientName()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.patient_prescription != nil {
		edges = append(edges, patient.EdgePatientPrescription)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientPrescription:
		ids := make([]ent.Value, 0, len(m.patient_prescription))
		for id := range m.patient_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpatient_prescription != nil {
		edges = append(edges, patient.EdgePatientPrescription)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgePatientPrescription:
		ids := make([]ent.Value, 0, len(m.removedpatient_prescription))
		for id := range m.removedpatient_prescription {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgePatientPrescription:
		m.ResetPatientPrescription()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// PrescriptionMutation represents an operation that mutate the Prescriptions
// nodes in the graph.
type PrescriptionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_Prescrip_Note     *string
	_Prescrip_DateTime *time.Time
	clearedFields      map[string]struct{}
	doctor             *int
	cleareddoctor      bool
	patient            *int
	clearedpatient     bool
	nurse              *int
	clearednurse       bool
	drug               *int
	cleareddrug        bool
	done               bool
	oldValue           func(context.Context) (*Prescription, error)
}

var _ ent.Mutation = (*PrescriptionMutation)(nil)

// prescriptionOption allows to manage the mutation configuration using functional options.
type prescriptionOption func(*PrescriptionMutation)

// newPrescriptionMutation creates new mutation for $n.Name.
func newPrescriptionMutation(c config, op Op, opts ...prescriptionOption) *PrescriptionMutation {
	m := &PrescriptionMutation{
		config:        c,
		op:            op,
		typ:           TypePrescription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrescriptionID sets the id field of the mutation.
func withPrescriptionID(id int) prescriptionOption {
	return func(m *PrescriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Prescription
		)
		m.oldValue = func(ctx context.Context) (*Prescription, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prescription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrescription sets the old Prescription of the mutation.
func withPrescription(node *Prescription) prescriptionOption {
	return func(m *PrescriptionMutation) {
		m.oldValue = func(context.Context) (*Prescription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrescriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrescriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PrescriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPrescripNote sets the Prescrip_Note field.
func (m *PrescriptionMutation) SetPrescripNote(s string) {
	m._Prescrip_Note = &s
}

// PrescripNote returns the Prescrip_Note value in the mutation.
func (m *PrescriptionMutation) PrescripNote() (r string, exists bool) {
	v := m._Prescrip_Note
	if v == nil {
		return
	}
	return *v, true
}

// OldPrescripNote returns the old Prescrip_Note value of the Prescription.
// If the Prescription object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PrescriptionMutation) OldPrescripNote(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrescripNote is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrescripNote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrescripNote: %w", err)
	}
	return oldValue.PrescripNote, nil
}

// ResetPrescripNote reset all changes of the "Prescrip_Note" field.
func (m *PrescriptionMutation) ResetPrescripNote() {
	m._Prescrip_Note = nil
}

// SetPrescripDateTime sets the Prescrip_DateTime field.
func (m *PrescriptionMutation) SetPrescripDateTime(t time.Time) {
	m._Prescrip_DateTime = &t
}

// PrescripDateTime returns the Prescrip_DateTime value in the mutation.
func (m *PrescriptionMutation) PrescripDateTime() (r time.Time, exists bool) {
	v := m._Prescrip_DateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldPrescripDateTime returns the old Prescrip_DateTime value of the Prescription.
// If the Prescription object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PrescriptionMutation) OldPrescripDateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrescripDateTime is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrescripDateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrescripDateTime: %w", err)
	}
	return oldValue.PrescripDateTime, nil
}

// ResetPrescripDateTime reset all changes of the "Prescrip_DateTime" field.
func (m *PrescriptionMutation) ResetPrescripDateTime() {
	m._Prescrip_DateTime = nil
}

// SetDoctorID sets the doctor edge to Doctor by id.
func (m *PrescriptionMutation) SetDoctorID(id int) {
	m.doctor = &id
}

// ClearDoctor clears the doctor edge to Doctor.
func (m *PrescriptionMutation) ClearDoctor() {
	m.cleareddoctor = true
}

// DoctorCleared returns if the edge doctor was cleared.
func (m *PrescriptionMutation) DoctorCleared() bool {
	return m.cleareddoctor
}

// DoctorID returns the doctor id in the mutation.
func (m *PrescriptionMutation) DoctorID() (id int, exists bool) {
	if m.doctor != nil {
		return *m.doctor, true
	}
	return
}

// DoctorIDs returns the doctor ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DoctorID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) DoctorIDs() (ids []int) {
	if id := m.doctor; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDoctor reset all changes of the "doctor" edge.
func (m *PrescriptionMutation) ResetDoctor() {
	m.doctor = nil
	m.cleareddoctor = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *PrescriptionMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *PrescriptionMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *PrescriptionMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *PrescriptionMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *PrescriptionMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetNurseID sets the nurse edge to Nurse by id.
func (m *PrescriptionMutation) SetNurseID(id int) {
	m.nurse = &id
}

// ClearNurse clears the nurse edge to Nurse.
func (m *PrescriptionMutation) ClearNurse() {
	m.clearednurse = true
}

// NurseCleared returns if the edge nurse was cleared.
func (m *PrescriptionMutation) NurseCleared() bool {
	return m.clearednurse
}

// NurseID returns the nurse id in the mutation.
func (m *PrescriptionMutation) NurseID() (id int, exists bool) {
	if m.nurse != nil {
		return *m.nurse, true
	}
	return
}

// NurseIDs returns the nurse ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// NurseID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) NurseIDs() (ids []int) {
	if id := m.nurse; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNurse reset all changes of the "nurse" edge.
func (m *PrescriptionMutation) ResetNurse() {
	m.nurse = nil
	m.clearednurse = false
}

// SetDrugID sets the drug edge to Drug by id.
func (m *PrescriptionMutation) SetDrugID(id int) {
	m.drug = &id
}

// ClearDrug clears the drug edge to Drug.
func (m *PrescriptionMutation) ClearDrug() {
	m.cleareddrug = true
}

// DrugCleared returns if the edge drug was cleared.
func (m *PrescriptionMutation) DrugCleared() bool {
	return m.cleareddrug
}

// DrugID returns the drug id in the mutation.
func (m *PrescriptionMutation) DrugID() (id int, exists bool) {
	if m.drug != nil {
		return *m.drug, true
	}
	return
}

// DrugIDs returns the drug ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DrugID instead. It exists only for internal usage by the builders.
func (m *PrescriptionMutation) DrugIDs() (ids []int) {
	if id := m.drug; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDrug reset all changes of the "drug" edge.
func (m *PrescriptionMutation) ResetDrug() {
	m.drug = nil
	m.cleareddrug = false
}

// Op returns the operation name.
func (m *PrescriptionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Prescription).
func (m *PrescriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PrescriptionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._Prescrip_Note != nil {
		fields = append(fields, prescription.FieldPrescripNote)
	}
	if m._Prescrip_DateTime != nil {
		fields = append(fields, prescription.FieldPrescripDateTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PrescriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prescription.FieldPrescripNote:
		return m.PrescripNote()
	case prescription.FieldPrescripDateTime:
		return m.PrescripDateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PrescriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prescription.FieldPrescripNote:
		return m.OldPrescripNote(ctx)
	case prescription.FieldPrescripDateTime:
		return m.OldPrescripDateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Prescription field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PrescriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prescription.FieldPrescripNote:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrescripNote(v)
		return nil
	case prescription.FieldPrescripDateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrescripDateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Prescription field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PrescriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PrescriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PrescriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Prescription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PrescriptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PrescriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrescriptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Prescription nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PrescriptionMutation) ResetField(name string) error {
	switch name {
	case prescription.FieldPrescripNote:
		m.ResetPrescripNote()
		return nil
	case prescription.FieldPrescripDateTime:
		m.ResetPrescripDateTime()
		return nil
	}
	return fmt.Errorf("unknown Prescription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PrescriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.doctor != nil {
		edges = append(edges, prescription.EdgeDoctor)
	}
	if m.patient != nil {
		edges = append(edges, prescription.EdgePatient)
	}
	if m.nurse != nil {
		edges = append(edges, prescription.EdgeNurse)
	}
	if m.drug != nil {
		edges = append(edges, prescription.EdgeDrug)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PrescriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case prescription.EdgeDoctor:
		if id := m.doctor; id != nil {
			return []ent.Value{*id}
		}
	case prescription.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case prescription.EdgeNurse:
		if id := m.nurse; id != nil {
			return []ent.Value{*id}
		}
	case prescription.EdgeDrug:
		if id := m.drug; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PrescriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PrescriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PrescriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleareddoctor {
		edges = append(edges, prescription.EdgeDoctor)
	}
	if m.clearedpatient {
		edges = append(edges, prescription.EdgePatient)
	}
	if m.clearednurse {
		edges = append(edges, prescription.EdgeNurse)
	}
	if m.cleareddrug {
		edges = append(edges, prescription.EdgeDrug)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PrescriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case prescription.EdgeDoctor:
		return m.cleareddoctor
	case prescription.EdgePatient:
		return m.clearedpatient
	case prescription.EdgeNurse:
		return m.clearednurse
	case prescription.EdgeDrug:
		return m.cleareddrug
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PrescriptionMutation) ClearEdge(name string) error {
	switch name {
	case prescription.EdgeDoctor:
		m.ClearDoctor()
		return nil
	case prescription.EdgePatient:
		m.ClearPatient()
		return nil
	case prescription.EdgeNurse:
		m.ClearNurse()
		return nil
	case prescription.EdgeDrug:
		m.ClearDrug()
		return nil
	}
	return fmt.Errorf("unknown Prescription unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PrescriptionMutation) ResetEdge(name string) error {
	switch name {
	case prescription.EdgeDoctor:
		m.ResetDoctor()
		return nil
	case prescription.EdgePatient:
		m.ResetPatient()
		return nil
	case prescription.EdgeNurse:
		m.ResetNurse()
		return nil
	case prescription.EdgeDrug:
		m.ResetDrug()
		return nil
	}
	return fmt.Errorf("unknown Prescription edge %s", name)
}
