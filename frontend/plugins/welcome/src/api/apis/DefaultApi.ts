/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Prescription
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersPrescription,
    ControllersPrescriptionFromJSON,
    ControllersPrescriptionToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntDrug,
    EntDrugFromJSON,
    EntDrugToJSON,
    EntNurse,
    EntNurseFromJSON,
    EntNurseToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPrescription,
    EntPrescriptionFromJSON,
    EntPrescriptionToJSON,
} from '../models';

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateDrugRequest {
    drug: EntDrug;
}

export interface CreateNurseRequest {
    nurse: EntNurse;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreatePrescriptionRequest {
    prescription: ControllersPrescription;
}

export interface DeletePrescriptionRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetDrugRequest {
    id: number;
}

export interface GetNurseRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPrescriptionRequest {
    id: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListDrugRequest {
    limit?: number;
    offset?: number;
}

export interface ListNurseRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrescriptionRequest {
    limit?: number;
    offset?: number;
}

export interface UpdatePrescriptionRequest {
    id: number;
    drugAllergy: EntPrescription;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrugRaw(requestParameters: CreateDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.drug === null || requestParameters.drug === undefined) {
            throw new runtime.RequiredError('drug','Required parameter requestParameters.drug was null or undefined when calling createDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/drugs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDrugToJSON(requestParameters.drug),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * Create drug
     * Create drug
     */
    async createDrug(requestParameters: CreateDrugRequest): Promise<EntDrug> {
        const response = await this.createDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurseRaw(requestParameters: CreateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling createNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurse(requestParameters: CreateNurseRequest): Promise<EntNurse> {
        const response = await this.createNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create prescription
     * Create prescription
     */
    async createPrescriptionRaw(requestParameters: CreatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.prescription === null || requestParameters.prescription === undefined) {
            throw new runtime.RequiredError('prescription','Required parameter requestParameters.prescription was null or undefined when calling createPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prescriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersPrescriptionToJSON(requestParameters.prescription),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * Create prescription
     * Create prescription
     */
    async createPrescription(requestParameters: CreatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.createPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prescription by ID
     * Delete a prescription entity by ID
     */
    async deletePrescriptionRaw(requestParameters: DeletePrescriptionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get prescription by ID
     * Delete a prescription entity by ID
     */
    async deletePrescription(requestParameters: DeletePrescriptionRequest): Promise<object> {
        const response = await this.deletePrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrugRaw(requestParameters: GetDrugRequest): Promise<runtime.ApiResponse<EntDrug>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDrug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDrugFromJSON(jsonValue));
    }

    /**
     * get drug by ID
     * Get a drug entity by ID
     */
    async getDrug(requestParameters: GetDrugRequest): Promise<EntDrug> {
        const response = await this.getDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurseRaw(requestParameters: GetNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurse(requestParameters: GetNurseRequest): Promise<EntNurse> {
        const response = await this.getNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prescription by ID
     * Get a prescription entity by ID
     */
    async getPrescriptionRaw(requestParameters: GetPrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * get prescription by ID
     * Get a prescription entity by ID
     */
    async getPrescription(requestParameters: GetPrescriptionRequest): Promise<EntPrescription> {
        const response = await this.getPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrugRaw(requestParameters: ListDrugRequest): Promise<runtime.ApiResponse<Array<EntDrug>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/drugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDrugFromJSON));
    }

    /**
     * list drug entities
     * List drug entities
     */
    async listDrug(requestParameters: ListDrugRequest): Promise<Array<EntDrug>> {
        const response = await this.listDrugRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurseRaw(requestParameters: ListNurseRequest): Promise<runtime.ApiResponse<Array<EntNurse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNurseFromJSON));
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurse(requestParameters: ListNurseRequest): Promise<Array<EntNurse>> {
        const response = await this.listNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list prescription entities
     * List prescription entities
     */
    async listPrescriptionRaw(requestParameters: ListPrescriptionRequest): Promise<runtime.ApiResponse<Array<EntPrescription>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrescriptionFromJSON));
    }

    /**
     * list prescription entities
     * List prescription entities
     */
    async listPrescription(requestParameters: ListPrescriptionRequest): Promise<Array<EntPrescription>> {
        const response = await this.listPrescriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * update prescription by ID
     * Update a prescription entity by ID
     */
    async updatePrescriptionRaw(requestParameters: UpdatePrescriptionRequest): Promise<runtime.ApiResponse<EntPrescription>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrescription.');
        }

        if (requestParameters.drugAllergy === null || requestParameters.drugAllergy === undefined) {
            throw new runtime.RequiredError('drugAllergy','Required parameter requestParameters.drugAllergy was null or undefined when calling updatePrescription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prescriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrescriptionToJSON(requestParameters.drugAllergy),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrescriptionFromJSON(jsonValue));
    }

    /**
     * update prescription by ID
     * Update a prescription entity by ID
     */
    async updatePrescription(requestParameters: UpdatePrescriptionRequest): Promise<EntPrescription> {
        const response = await this.updatePrescriptionRaw(requestParameters);
        return await response.value();
    }

}
